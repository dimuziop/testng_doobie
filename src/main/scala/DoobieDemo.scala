import cats.effect.{ExitCode, IO, IOApp}
import doobie.{HC, HPS}
import doobie.util.transactor.Transactor
import doobie.implicits._
import doobie.util.update.Update

object DoobieDemo extends IOApp {

  case class Actor(id: Int, name: String)

  case class Movie(id: String, title: String, year: Int, actors: List[String], director: String)


  implicit class Debugger[A](io: IO[A]) {
    def debug: IO[A] = io.map { a =>
      println(s"[${Thread.currentThread().getName}] - $a")
      a
    }
  }

  val xa: Transactor[IO] = Transactor.fromDriverManager[IO](
    "org.postgresql.Driver",
    "jdbc:postgresql:myimdb",
    "docker", // username
    "docker"
  )

  def findAllActorNames: IO[List[String]] = {
    val query = sql"select name from actors".query[String]
    val action = query.to[List]
    action.transact(xa)
  }

  def findActorById(id: Int): IO[Option[Actor]] = {
    val query = sql"select id, name from actors where id=$id".query[Actor]
    val action = query.option
    action.transact(xa)
  }

  val actorsNamesStream = sql"select name from actors".query[String]
    .stream.compile.toList.transact(xa)

  // HC, HPS
  def findActorByName(name: String): IO[Option[Actor]] = {
    val queryStr = "select id, name from actors where name = ?"
    HC.stream[Actor](queryStr, HPS.set(name), 100).compile.toList.map(_.headOption).transact(xa)
  }

  // fragments
  def findActorsWyInitial(letter: String): IO[List[Actor]] = {
    val selectPart = fr"select id, name"
    val fromPart = fr"from actors"
    val wherePart = fr"where LEFT(name,1) = $letter"

    val statement = selectPart ++ fromPart ++ wherePart

    statement.query[Actor].stream.compile.toList.transact(xa)

  }

  // update
  def saveActor(id: Int, name: String): IO[Int] = {
    val query = sql"insert into actors (id, name) values ($id, $name)"
    query.update.run.transact(xa)
  }

  def saveActor_v2(id: Int, name: String): IO[Int] = {
    val query = "insert into actors (id, name) values (?, ?)"
    Update[Actor](query).run(Actor(id, name)).transact(xa)
  }

  // update with autogenerated IDs
  def saveActorAutoGenerated(name: String): IO[Int] = {
    sql"insert into actors (name) values ($name)".update.withUniqueGeneratedKeys[Int]("id").transact(xa)
  }

  // update insert many
  def saveMultipleActorsBy(actorNames: List[String]): IO[List[Actor]] = {
    val insertStatement = "insert into actors (name) values (?)"
    val updateAction = Update[String](insertStatement).updateManyWithGeneratedKeys[Actor]("id", "name")(actorNames)
    updateAction.compile.toList.transact(xa)
  }

  override def run(args: List[String]): IO[ExitCode] =
    saveMultipleActorsBy(List("Carl", "Tito", "Largo", "Cabezon", "Willy")).debug.as(ExitCode.Success)

}
